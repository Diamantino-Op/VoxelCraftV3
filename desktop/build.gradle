buildscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    classpath "io.github.fourlastor:construo:$construoVersion"
    classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:$graalvmBuildtoolsVersion"
  }
}

plugins {
  id "application"
}

apply plugin: 'io.github.fourlastor.construo'

import io.github.fourlastor.construo.Target

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'com.diamantino.voxelcraft.desktop.DesktopLauncher'

application.setMainClass(mainClassName)

java {
  sourceCompatibility = JavaVersion.current()
}

compileJava.options.release.set(Integer.parseInt(JavaVersion.current().getMajorVersion()));

dependencies {
  implementation project(':coreClient')
  implementation "games.rednblack.miniaudio:miniaudio:$miniaudioVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

  implementation "io.github.berstanio:gdx-svmhelper-backend-lwjgl3:$graalHelperVersion"
  implementation "io.github.berstanio:gdx-svmhelper-extension-bullet:$graalHelperVersion"
  implementation "io.github.berstanio:gdx-svmhelper-extension-freetype:$graalHelperVersion"
}

def os = System.properties['os.name'].toLowerCase()

run {
  workingDir = rootProject.file('assets').path
  setIgnoreExitValue(true)

  if (os.contains('mac')) {
    jvmArgs += "-XstartOnFirstThread"
  }
}

jar {
  archiveFileName.set("${appName}-Desktop.jar")
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  dependencies {
    exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
  }
  manifest {
    attributes 'Main-Class': project.mainClassName
  }
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

construo {
  name.set(appName)
  humanName.set(appName)
  version.set("$voxelcraftVersion")

  targets.configure {
    //--------------------------- Linux ---------------------------
    // x86_64
    create("linuxX64", Target.Linux) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://download.oracle.com/graalvm/23/latest/graalvm-jdk-23_linux-x64_bin.tar.gz")
    }

    // Arm64
    create("linuxArm64", Target.Linux) {
      architecture.set(Target.Architecture.AARCH64)
      jdkUrl.set("https://download.oracle.com/graalvm/23/latest/graalvm-jdk-23_linux-aarch64_bin.tar.gz")
    }

    //--------------------------- Mac ---------------------------
    // x86_64
    create("macX64", Target.MacOs) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://download.oracle.com/graalvm/23/latest/graalvm-jdk-23_macos-x64_bin.tar.gz")
      identifier.set("com.diamantino.voxelcraft." + appName)
      macIcon.set(project.file("icons/logo.icns"))
    }

    // Arm64
    create("macM1", Target.MacOs) {
      architecture.set(Target.Architecture.AARCH64)
      jdkUrl.set("https://download.oracle.com/graalvm/23/latest/graalvm-jdk-23_macos-aarch64_bin.tar.gz")
      identifier.set("com.diamantino.voxelcraft." + appName)
      macIcon.set(project.file("icons/logo.icns"))
    }

    //--------------------------- Windows ---------------------------
    // x86_64
    create("winX64", Target.Windows) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://download.oracle.com/graalvm/23/latest/graalvm-jdk-23_windows-x64_bin.zip")
    }
  }
}

tasks.register('dist') {
  dependsOn 'jar'
}

distributions {
  main {
    contents {
      into('libs') {
        project.configurations.runtimeClasspath.files.findAll { file ->
          file.getName() != project.tasks.jar.outputs.files.singleFile.name
        }.each { file ->
          exclude file.name
        }
      }
    }
  }
}

startScripts.dependsOn(':desktop:jar')
startScripts.classpath = project.tasks.jar.outputs.files

apply from: file("nativeimage.gradle")
